蓝光1: big  
中规模: 110w img, 15119 id. 一个租户多个 店/设备组
input: /data2/zhangyong/data/pk/pk_13/input/input_languang_4_2.json   2730
input: /data2/zhangyong/data/pk/pk_13/input/input_languang_4_3.json   2830


/data2/zhangyong/data/pk/pk_13/output_1/out_1/out_2_1.csv
img_sum:1106092, id_sum:59289, keynotes_sum:306435, 5.2img/id
used: 4322.5s
非常散
很慢, milvus慢, 用不了gpu


img_sum:1106092, id_sum:47936, keynotes_sum:304787, 6.4img/id
2021.1.31   used: 11513.2s
/data2/zhangyong/data/pk/pk_13/output_1/out_1/out_2_2.csv
gt: img_sum:882374, id_sum:14897
cluster: img_sum:882374, id_sum:47934
有监督: 纯度, 散度, nmi, v_measure, ari:0.99715, 0.95867, 0, 0.97753, 0.94408
avg_pre, avg_rec, fscore, fmi:0.97839, 0.91215, 0.94411, 0.94469
macro-F1: p_1:0.99898, r_1:0.86710, fscore_1:0.92838
micro-F1: p_2:0.99287, r_2:0.91018, fscore_2:0.94973
purity1:0.99898, divergence1:3.26542
all_img:1105826, recall:79.79%

2021.5.19
img_sum:1106092, id_sum:39105, keynotes_sum:425611, 10.9img/id
used: 9202.3s=153.4min  太慢
size_gt:1106092, size_pred:1106092
gt: img_sum:1065606, id_sum:15078
cluster: img_sum:1065606, id_sum:39104 
有监督: 纯度, 散度, nmi, v_measure, ari:0.96981, 0.96984, 0, 0.96983, 0.6195
avg_pre, avg_rec, pairwise-F1, fmi:0.44363, 0.94374, 0.60355, 0.64705
macro-F1: p_1:0.99612, r_1:0.91231, fscore_1:0.95237
micro-F1: p_2:0.92921, r_2:0.93714, fscore_2:0.93316
purity:0.92921, divergence:2.71057, drop:0.0366

2021.5.23
img_sum:1106092, id_sum:162064, keynotes_sum:75731, 0.5img/id
used: 4294.6s=71.6min
size_gt:1106092, size_pred:1105735
gt: img_sum:1085806, id_sum:15095
cluster: img_sum:1085806, id_sum:162050 
有监督: 纯度, 散度, nmi, v_measure, ari:0.99911, 0.74214, 0, 0.85166, 8.93358
avg_pre, avg_rec, pairwise-F1, fmi:0.9933, 0.03138, 0.06083, 0.17654
macro-F1: p_1:0.99792, r_1:0.49494, fscore_1:0.6617
micro-F1: p_2:0.99693, r_2:0.24094, fscore_2:0.38808
purity:0.99693, divergence:10.84889, drop:0.0180

img_sum:1106092, id_sum:22835, keynotes_sum:61331, 2.7img/id
used: 4376.9s=72.9min
size_gt:1106092, size_pred:1105737
gt: img_sum:1085805, id_sum:15095
cluster: img_sum:1085805, id_sum:22833 
有监督: 纯度, 散度, nmi, v_measure, ari:0.92429, 0.98133, 0, 0.95196, 3.44058
avg_pre, avg_rec, pairwise-F1, fmi:0.05762, 0.95628, 0.10869, 0.23473
macro-F1: p_1:0.99298, r_1:0.94431, fscore_1:0.96803
micro-F1: p_2:0.85632, r_2:0.95588, fscore_2:0.90337
purity:0.85632, divergence:1.65419, drop:0.0180

改了milvus_api, 快了一倍, 但是结果不太对



------------------------------------------
测速:  open and prase_json
6.4w   
Transducers.foldxt()  nthreads:1
18.683546 seconds (45.73 M allocations: 6.369 GiB, 6.27% gc time, 4.77% compilation time)
Transducers.foldxt()  nthreads:4     没有加速
18.610774 seconds (45.73 M allocations: 6.370 GiB, 6.46% gc time, 4.82% compilation time)

Folds.collect((prase_json(line) for line in eachline(input_json)), NondeterministicEx()) 
nthreads:4   加速了, cpu:400%
15.770137 seconds (57.82 M allocations: 8.216 GiB, 31.24% gc time, 1.47% compilation time)
nthreads:40   加速了, cpu:1000%, 但总时间长了
22.034996 seconds (58.31 M allocations: 7.086 GiB, 50.70% gc time, 1.14% compilation time)

344w
Folds.collect()  nthreads:40    20min    mem:42G
1217.823153 seconds (2.60 G allocations: 352.374 GiB, 46.45% gc time, 0.02% compilation time)

Transducers.foldxt()  nthreads:1   17min
1046.733671 seconds (2.38 G allocations: 341.719 GiB, 4.77% gc time, 0.09% compilation time)

-----------------------------------------

结论: 
1. eachline, prase_json(line)  不需要并行, 速度就够
2. Folds.collect()   可以并行, 有提速
3. Transducers.foldxt() 可跑通,但不能并行


Float32[0.9307888 0.9098839 0.90804577 0.4974745 0.4500203 0.3683396 0.33403283 0.21013612 0.20484513 -1.1920929f-7; 0.9428275 0.93961227 0.92051995 0.4437487 0.40911835 0.32039297 0.30260003 0.23320949 0.20484513 0.0; 0.95282054 0.9302086 0.929705 0.55750996 0.50933695 0.40723372 0.3181799 0.23320949 0.21013612 0.0; 0.9566524 0.95282054 0.9307888 0.9274023 0.92051995 0.9156743 0.9076917 0.3767873 0.35914522 0.0; 0.9428275 0.9302086 0.928671 0.9236571 0.9227817 0.9102885 0.90804577 0.35914522 0.0423218 -1.1920929f-7; 0.93961227 0.9361723 0.929705 0.9188027 0.9160781 0.9098839 0.8962744 0.3767873 0.0423218 5.9604645f-8; 0.9274023 0.9236571 0.9188027 0.40723372 0.39918935 0.3683396 0.32039297 0.228401 0.21664846 0.0; 0.9156743 0.9102885 0.8962744 0.50933695 0.46627933 0.4500203 0.40911835 0.228401 0.20862132 -1.1920929f-7; 0.9566524 0.928671 0.9160781 0.55750996 0.4974745 0.45739293 0.4437487 0.21664846 0.20862132 0.0; 0.9361723 0.9227817 0.9076917 0.46627933 0.45739293 0.39918935 0.33403283 0.3181799 0.30260003 0.0]
Int32[4 6 5 9 8 7 10 3 2 1; 5 6 4 9 8 7 10 3 1 2; 4 5 6 9 8 7 10 2 1 3; 9 3 1 7 2 8 10 6 5 4; 2 3 9 7 10 8 1 4 6 5; 2 10 3 7 9 1 8 4 5 6; 4 5 6 3 10 1 2 8 9 7; 4 5 6 3 10 1 2 7 9 8; 4 5 6 3 1 10 2 7 8 9; 6 5 4 8 9 7 1 3 2 10]

Float32[0.3683396 0.33403283 0.21013612 0.20484513 -1.1920929f-7; 0.32039297 0.30260003 0.23320949 0.20484513 0.0; 0.40723372 0.3181799 0.23320949 0.21013612 0.0; 0.9156743 0.9076917 0.3767873 0.35914522 0.0; 0.9102885 0.90804577 0.35914522 0.0423218 -1.1920929f-7; 0.9098839 0.8962744 0.3767873 0.0423218 5.9604645f-8; 0.3683396 0.32039297 0.228401 0.21664846 0.0; 0.4500203 0.40911835 0.228401 0.20862132 -1.1920929f-7; 0.45739293 0.4437487 0.21664846 0.20862132 0.0; 0.39918935 0.33403283 0.3181799 0.30260003 0.0]
Int32[7 10 3 2 1; 7 10 3 1 2; 7 10 2 1 3; 8 10 6 5 4; 8 1 4 6 5; 1 8 4 5 6; 1 2 8 9 7; 1 2 7 9 8; 10 2 7 8 9; 7 1 3 2 10]



